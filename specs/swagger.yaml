openapi: 3.0.0
info:
  description: "API system"
  version: "1.0.10"
  title: "Swagger Test"
servers:
  - url: http://localhost:8080/
    description: Remote server
tags:
- name: "auth"
  description: "Access to auth"
- name: "user"
  description: "Access to User"

paths:
  /auth/login:
    get:
      tags:
        - "auth"
      summary: "Login with credentials (email/password)"
      security:
        - basicAuth: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#components/schemas/Tokenization"
        "403":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#components/schemas/BackendException"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#components/schemas/BackendException"
  /auth/check_token:
    get:
      tags:
        - "auth"
      summary: "Check Bearer Token"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "403":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#components/schemas/BackendException"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#components/schemas/BackendException"
  
  /auth/refresh_token:
    get:
      tags:
        - "auth"
      summary: "Refresh Bearer Token"
      security:
        - bearerRefreshAuth: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#components/schemas/Tokenization"
        "403":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#components/schemas/BackendException"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#components/schemas/BackendException"

  /auth/update_password:
    put:
      tags:
        - "auth"
      summary: "Update password User"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                newPassword:
                  type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: string
        "403":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#components/schemas/BackendException"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#components/schemas/BackendException"

  /user:
    get:
      tags:
        - "user"
      summary: "Get all users"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/User"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#components/schemas/BackendException"
    post:
      tags:
        - "user"
      summary: "Create new user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#components/schemas/UserCreate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#components/schemas/User"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#components/schemas/BackendException"
    put:
      tags:
        - "user"
      summary: "Update user"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#components/schemas/UserUpdate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#components/schemas/User"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#components/schemas/BackendException"
  /user/{id}:
    get:
      tags:
        - "user"
      summary: "Get one user"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#components/schemas/User"
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#components/schemas/BackendException"
    delete:
      tags:
        - "user"
      summary: "Delete one user"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            text/plain:
              schema:
                type: string
        "404":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#components/schemas/BackendException"

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Auth header (Authorization) Access Token"
    bearerRefreshAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Refresh Access Token"
  schemas:
    Tokenization:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        typeUser:
          type: string
          enum:
            - "user"
            - "immobile"
    UserCreate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        typeUser:
          type: string
          enum:
            - "user"
            - "immobile"
    UserUpdate:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        typeUser:
          type: string
          enum:
            - "user"
            - "immobile"
    BackendException:
      type: object
      properties:
        error:
          type: string